name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Install package
      run: |
        pip install -e .
        
    - name: Verify environment
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import flask; print(f'Flask {flask.__version__}')"
        python -c "import Bio; print(f'Biopython {Bio.__version__}')"
        
    - name: Test API server
      env:
        NCBI_EMAIL: ${{ secrets.NCBI_EMAIL }}
        NCBI_API_KEY: ${{ secrets.NCBI_API_KEY }}
        FLASK_ENV: testing
      run: |
        # Test module imports
        python -c "import api_server; print('API server imports successfully')"
        
        # Test server initialization
        python wsgi.py --test-only
        
        # Test API health endpoint
        python -c "
import requests
import time
import sys

def test_health():
    server = api_server.app.test_client()
    response = server.get('/health')
    assert response.status_code == 200
    data = response.get_json()
    assert data['status'] == 'healthy'
    sys.exit(0)

test_health()
"
